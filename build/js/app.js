"use strict";

;(function () {
    "use strict";

    angular.module('app', ["ui.bootstrap", 'ui.router', 'home', 'restaurant']).config(["$urlRouterProvider", "$stateProvider", function ($urlRouterProvider, $stateProvider) {
        $urlRouterProvider.otherwise('/home');
    }]).run(function () {});
})();
'use strict';

;(function () {
  "use strict";

  angular.module('home', []);

  angular.module('home').config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state('home', {
      url: '/home',
      controller: 'HomeCtrl',
      templateUrl: '../views/home.html',
      controllerAs: 'home'
    });
  }]);
})();
'use strict';

;(function () {
    "use strict";

    angular.module('restaurant', []);

    angular.module('restaurant').config(["$stateProvider", function ($stateProvider) {
        $stateProvider.state('restaurant', {
            url: '/restaurant',
            controller: 'restaurantCtrl',
            templateUrl: '../views/waitinglist.ejs',
            controllerAs: 'restaurantCtrl'
        });
    }]);
})();
'use strict';

;(function () {
  "use strict";

  HomeCtrl.$inject = ["$http"];
  angular.module('home').controller('HomeCtrl', HomeCtrl);

  function HomeCtrl($http) {
    var vm = this;

    vm.helloWorld = "Hello World";
  }
})();
'use strict';

;(function () {
    "use strict";

    restaurantCtrl.$inject = ["$http"];
    angular.module('restaurant').controller('restaurantCtrl', restaurantCtrl);

    function restaurantCtrl($http) {
        var vm = this;

        vm.guests;
        vm.getGuests = getGuests;

        function getGuests() {
            $http({
                method: "GET",
                url: "/guests"
            }).then(function (result) {
                vm.guests = result.data;
            });
        }
        vm.getGuests();
    }
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImFwcC5tb2R1bGUuanMiLCJob21lL21vZHVsZS5qcyIsInJlc3RhdXJhbnQvbW9kdWxlLmpzIiwiaG9tZS9ob21lLmNvbnRyb2xsZXIuanMiLCJyZXN0YXVyYW50L3Jlc3RhdXJhbnRfY29udHJvbGxlci5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJHN0YXRlUHJvdmlkZXIiLCJvdGhlcndpc2UiLCJydW4iLCJzdGF0ZSIsInVybCIsImNvbnRyb2xsZXIiLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXJBcyIsIkhvbWVDdHJsIiwiJGh0dHAiLCJ2bSIsImhlbGxvV29ybGQiLCJyZXN0YXVyYW50Q3RybCIsImd1ZXN0cyIsImdldEd1ZXN0cyIsIm1ldGhvZCIsInRoZW4iLCJyZXN1bHQiLCJkYXRhIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUNBQSxDQUFFLENBQUEsWUFBVztJQUNiOztJQUVBQSxRQUFRQyxPQUFPLE9BQU8sQ0FDbEIsZ0JBQ0EsYUFDQSxRQUNBLGVBRUNDLGdEQUFPLFVBQVVDLG9CQUFvQkMsZ0JBQWdCO1FBQ2xERCxtQkFBbUJFLFVBQVU7UUFFaENDLElBQUksWUFBWTs7QURIckI7O0FFVEEsQ0FBRSxDQUFBLFlBQVc7RUFDYjs7RUFFQU4sUUFBUUMsT0FBTyxRQUFROztFQUV2QkQsUUFBUUMsT0FBTyxRQUNaQywwQkFBTyxVQUFTRSxnQkFBZTtJQUM1QkEsZUFDR0csTUFBTSxRQUFRO01BQ2JDLEtBQUs7TUFDTEMsWUFBWTtNQUNaQyxhQUFhO01BQ2JDLGNBQWM7Ozs7QUZheEI7O0FHekJBLENBQUUsQ0FBQSxZQUFXO0lBQ2I7O0lBRUFYLFFBQVFDLE9BQU8sY0FBYzs7SUFFN0JELFFBQVFDLE9BQU8sY0FDVkMsMEJBQU8sVUFBU0UsZ0JBQWU7UUFDNUJBLGVBQ0tHLE1BQU0sY0FBYztZQUNqQkMsS0FBSztZQUNMQyxZQUFZO1lBQ1pDLGFBQWE7WUFDYkMsY0FBYzs7OztBSDZCOUI7O0FJekNBLENBQUUsQ0FBQSxZQUFXO0VBQ2I7OztFQUVBWCxRQUFRQyxPQUFPLFFBQ1pRLFdBQVcsWUFBWUc7O0VBRXhCLFNBQVNBLFNBQVNDLE9BQU87SUFDdkIsSUFBSUMsS0FBSzs7SUFFVEEsR0FBR0MsYUFBYTs7O0FKNkNwQjs7QUt0REEsQ0FBRSxDQUFBLFlBQVc7SUFDYjs7O0lBRUFmLFFBQVFDLE9BQU8sY0FDVlEsV0FBVyxrQkFBa0JPOztJQUU5QixTQUFTQSxlQUFlSCxPQUFPO1FBQzNCLElBQUlDLEtBQUs7O1FBRVRBLEdBQUdHO1FBQ0hILEdBQUdJLFlBQVlBOztRQUVmLFNBQVNBLFlBQVc7WUFDaEJMLE1BQU07Z0JBQ0ZNLFFBQVE7Z0JBQ1JYLEtBQUs7ZUFFSlksS0FBTSxVQUFBLFFBQVU7Z0JBQ2JOLEdBQUdHLFNBQVNJLE9BQU9DOzs7UUFHL0JSLEdBQUdJOztLQXJCViIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuOyhmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnYXBwJywgW1widWkuYm9vdHN0cmFwXCIsICd1aS5yb3V0ZXInLCAnaG9tZScsICdyZXN0YXVyYW50J10pLmNvbmZpZyhmdW5jdGlvbiAoJHVybFJvdXRlclByb3ZpZGVyLCAkc3RhdGVQcm92aWRlcikge1xuICAgICAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvaG9tZScpO1xuICAgIH0pLnJ1bihmdW5jdGlvbiAoKSB7fSk7XG59KSgpO1xuJ3VzZSBzdHJpY3QnO1xuXG47KGZ1bmN0aW9uICgpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgYW5ndWxhci5tb2R1bGUoJ2hvbWUnLCBbXSk7XG5cbiAgYW5ndWxhci5tb2R1bGUoJ2hvbWUnKS5jb25maWcoZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2hvbWUnLCB7XG4gICAgICB1cmw6ICcvaG9tZScsXG4gICAgICBjb250cm9sbGVyOiAnSG9tZUN0cmwnLFxuICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9ob21lLmh0bWwnLFxuICAgICAgY29udHJvbGxlckFzOiAnaG9tZSdcbiAgICB9KTtcbiAgfSk7XG59KSgpO1xuJ3VzZSBzdHJpY3QnO1xuXG47KGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdyZXN0YXVyYW50JywgW10pO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3Jlc3RhdXJhbnQnKS5jb25maWcoZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdyZXN0YXVyYW50Jywge1xuICAgICAgICAgICAgdXJsOiAnL3Jlc3RhdXJhbnQnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ3Jlc3RhdXJhbnRDdHJsJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi4vdmlld3Mvd2FpdGluZ2xpc3QuZWpzJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3Jlc3RhdXJhbnRDdHJsJ1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pKCk7XG4ndXNlIHN0cmljdCc7XG5cbjsoZnVuY3Rpb24gKCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBhbmd1bGFyLm1vZHVsZSgnaG9tZScpLmNvbnRyb2xsZXIoJ0hvbWVDdHJsJywgSG9tZUN0cmwpO1xuXG4gIGZ1bmN0aW9uIEhvbWVDdHJsKCRodHRwKSB7XG4gICAgdmFyIHZtID0gdGhpcztcblxuICAgIHZtLmhlbGxvV29ybGQgPSBcIkhlbGxvIFdvcmxkXCI7XG4gIH1cbn0pKCk7XG4ndXNlIHN0cmljdCc7XG5cbjsoZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3Jlc3RhdXJhbnQnKS5jb250cm9sbGVyKCdyZXN0YXVyYW50Q3RybCcsIHJlc3RhdXJhbnRDdHJsKTtcblxuICAgIGZ1bmN0aW9uIHJlc3RhdXJhbnRDdHJsKCRodHRwKSB7XG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICAgICAgdm0uZ3Vlc3RzO1xuICAgICAgICB2bS5nZXRHdWVzdHMgPSBnZXRHdWVzdHM7XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0R3Vlc3RzKCkge1xuICAgICAgICAgICAgJGh0dHAoe1xuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgICAgICAgICB1cmw6IFwiL2d1ZXN0c1wiXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICB2bS5ndWVzdHMgPSByZXN1bHQuZGF0YTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZtLmdldEd1ZXN0cygpO1xuICAgIH1cbn0pKCk7IiwiOyhmdW5jdGlvbigpIHtcblwidXNlIHN0cmljdFwiO1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJywgW1xuICAgIFwidWkuYm9vdHN0cmFwXCIsXG4gICAgJ3VpLnJvdXRlcicsXG4gICAgJ2hvbWUnLFxuICAgICdyZXN0YXVyYW50J1xuXSlcbiAgICAuY29uZmlnKGZ1bmN0aW9uICgkdXJsUm91dGVyUHJvdmlkZXIsICRzdGF0ZVByb3ZpZGVyKSB7XG4gICAgICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy9ob21lJyk7XG4gICAgfSlcbiAgICAucnVuKGZ1bmN0aW9uICgpIHtcblxuICAgIH0pO1xufSgpKTtcbiIsIjsoZnVuY3Rpb24oKSB7XG5cInVzZSBzdHJpY3RcIjtcblxuYW5ndWxhci5tb2R1bGUoJ2hvbWUnLCBbXSk7XG5cbmFuZ3VsYXIubW9kdWxlKCdob21lJylcbiAgLmNvbmZpZyhmdW5jdGlvbigkc3RhdGVQcm92aWRlcil7XG4gICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAuc3RhdGUoJ2hvbWUnLCB7XG4gICAgICAgICAgdXJsOiAnL2hvbWUnLFxuICAgICAgICAgIGNvbnRyb2xsZXI6ICdIb21lQ3RybCcsXG4gICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy9ob21lLmh0bWwnLFxuICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2hvbWUnXG4gICAgICAgIH0pO1xuICB9KTtcbn0oKSk7XG4iLCI7KGZ1bmN0aW9uKCkge1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmFuZ3VsYXIubW9kdWxlKCdyZXN0YXVyYW50JywgW10pO1xuXG5hbmd1bGFyLm1vZHVsZSgncmVzdGF1cmFudCcpXG4gICAgLmNvbmZpZyhmdW5jdGlvbigkc3RhdGVQcm92aWRlcil7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ3Jlc3RhdXJhbnQnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL3Jlc3RhdXJhbnQnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdyZXN0YXVyYW50Q3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuLi92aWV3cy93YWl0aW5nbGlzdC5lanMnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3Jlc3RhdXJhbnRDdHJsJ1xuICAgICAgICAgICAgfSk7XG4gICAgfSk7XG59KCkpO1xuIiwiOyhmdW5jdGlvbigpIHtcblwidXNlIHN0cmljdFwiO1xuXG5hbmd1bGFyLm1vZHVsZSgnaG9tZScpXG4gIC5jb250cm9sbGVyKCdIb21lQ3RybCcsIEhvbWVDdHJsKTtcblxuICBmdW5jdGlvbiBIb21lQ3RybCgkaHR0cCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICB2bS5oZWxsb1dvcmxkID0gXCJIZWxsbyBXb3JsZFwiO1xuICB9XG59KCkpO1xuIiwiOyhmdW5jdGlvbigpIHtcblwidXNlIHN0cmljdFwiO1xuXG5hbmd1bGFyLm1vZHVsZSgncmVzdGF1cmFudCcpXG4gICAgLmNvbnRyb2xsZXIoJ3Jlc3RhdXJhbnRDdHJsJywgcmVzdGF1cmFudEN0cmwpO1xuXG4gICAgZnVuY3Rpb24gcmVzdGF1cmFudEN0cmwoJGh0dHApIHtcbiAgICAgICAgbGV0IHZtID0gdGhpcztcblxuICAgICAgICB2bS5ndWVzdHM7XG4gICAgICAgIHZtLmdldEd1ZXN0cyA9IGdldEd1ZXN0cztcblxuICAgICAgICBmdW5jdGlvbiBnZXRHdWVzdHMoKXtcbiAgICAgICAgICAgICRodHRwKHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgICAgICAgICAgdXJsOiBcIi9ndWVzdHNcIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbiggcmVzdWx0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdm0uZ3Vlc3RzID0gcmVzdWx0LmRhdGE7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdm0uZ2V0R3Vlc3RzKCk7XG4gICAgfVxufSgpKTtcbiJdfQ==
